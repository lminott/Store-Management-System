import java.util.ArrayList;
import java.util.Random;

public class StoreManagementSystem {
  public int revenue;
  public int expenses;
  public ArrayList<Product> productList;
  public ArrayList<Employee> employees;
  public  SuperMarketManagementSystem(int revenue, int expenses, ArrayList<Product> productList,ArrayList<Employee> employees) {
	  this.revenue=revenue;
	  this.expenses=expenses;
	  this.productList=productList;
	  this.employees=employees;
  }
  public void addProduct(String name,int price,int amount,int benchmark) {
	  Product newProduct=new Product(name,price,amount,amount,benchmark);
	  productList.add(newProduct);
  }
  public void removeProduct(String name) {
	  for(int i=0;i<productList.size();i++) {
		  if(productList.get(i).name==name) {
			  productList.remove(productList.get(i));
			  break;
		  }
	  }
	  return;
  }
  public void changePrice(String name, int newPrice) {
	  for(int i=0;i<productList.size();i++) {
		  if(productList.get(i).name==name) {
			  productList.get(i).price=newPrice;
			  break;
		  }
	  }
	  return;
  }
  public void dayToDaySimulator() {
	  Random random=new Random();
	  for(int i=0;i<productList.size();i++) {
		  if(productList.get(i).currentAmount==0) {
			  continue;
		  }
		  int amountSold=random.nextInt(productList.get(i).currentAmount);
		  productList.get(i).currentAmount=productList.get(i).currentAmount-amountSold;
		  revenue+=amountSold*productList.get(i).price;
	  }
	  return;
  }
  public int profitMargin() {
	  return revenue-expenses;
  }
  public void reStock() {
	  for(int i=0;i<productList.size();i++) {
		  if(productList.get(i).currentAmount<productList.get(i).benchmark) {
			  expenses+=(productList.get(i).initialAmount-productList.get(i).currentAmount)*productList.get(i).price;
			  productList.get(i).currentAmount=productList.get(i).initialAmount; 
		 }
	  }
	  return;
  }
  public void hireEmployee(String name, int employeeID,int salary) {
	  Employee newEmployee=new Employee(name,employeeID,salary);
	  employees.add(newEmployee);
	  return;
  }
  public void fireEmployee(int employeeID) {
	  for(int i=0;i<employees.size();i++) {
		  if(employees.get(i).employeeID==employeeID) {
			  employees.remove(employees.get(i));
			  break;
		  }
	  }
	  return;
  }
  public void payEmployees() {
	  for(int i=0;i<employees.size();i++) {
		  expenses+=employees.get(i).salary;
	  }
	  return;
  }
}
